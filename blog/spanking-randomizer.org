#+TITLE:       A script for indecisive doms and daredevil butt-gamblers
#+AUTHOR:      thingywhat
#+EMAIL:       thingywhat@Dee
#+DATE:        2015-01-22 Thu
#+URI:         /blog/%y/%m/%d/A script for indecisive doms and daredevil butt-gamblers
#+KEYWORDS:    spanking,lisp,script
#+TAGS:        spanking,lisp,script
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: A spanking randomizer

Testing run-this embedding:

#+BEGIN_HTML
<link rel="stylesheet" type="text/css" href="/media/run_this/run_this.css" />
<script type="text/javascript" src="/media/run_this/run_this.js"></script>
<pre lang="clisp" class="run-this">
(defparameter *implements*
  '((hand handspanked (heavy))
    (belt belted (leather))
    (cane caned (wicked ratten fierce))
    (switch switched (tiny swift))
    (brush spanked (heavy bath hair wooden))
    (paddle paddled (lexan wooden hole-filled frat ping-pong))
    (spoon spanked (wooden mixing slotted)))
  "A list of implements a spanking can take place with, along with
  adjectives, variants, and the verb used to describe what a spanking
  with eah is called.")

(defparameter *positions*
  '(otk diaper bent-over under-arm prone)
  "A list of possible spanking positions.")

(defparameter *dress*
  '("over your pants" "on your underwear" pantsless naked)
  "A list of your potential state of dress.")

(defparameter *minimum-spankings* 10
  "The minimum possible times you can be spanked")

(defparameter *maximum-spankings* 100
  "The maximum possible times you can be spanked")

(defun random-spanking (max min positions implements dress)
  "Picks a random implement, a random position, and then creates a
completely random spanking."
  (flet ((pick (list)
	   (nth (random (length list)) list)))
    (let ((implement (pick implements)))
      `(you should be ,(second implement) ,(pick dress)
	    ,(+ min (random (- max min))) times in the ,(pick positions)
	    position with a ,(pick (third implement)) ,(first implement)))))

(defun stylize-string (str)
  "Stylizes a string so it prints with correct capitalization and
formatting from a string."
  (labels
      ((style (char-list caps)
	 (when char-list
	   (let ((first (car char-list))
		 (rest (cdr char-list)))
	     (cond
	       ((char= first #\space) (cons #\space (style rest caps)))
	       ((char= first #\.) (cons #\. (style rest t)))
	       (caps (cons (char-upcase first) (style rest nil)))
	       (t (cons (char-downcase first) (style rest nil))))))))
    (coerce (style (coerce str 'list) t) 'string)))

(defun pretty-random-spanking ()
  "Decides on a random spanking, and prints it out with the string
pretty-printer."
  (flet ((style (str)
	   (stylize-string
	    (concatenate 'string
			 (string-trim "()" str) "!"))))
    (style (princ-to-string (random-spanking
			     *maximum-spankings*
			     *minimum-spankings*
			     *positions*
			     *implements*
			     *dress*)))))
</pre>
#+END_HTML
